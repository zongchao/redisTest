<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:redis="http://www.springframework.org/schema/redis"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

    <!-- redis -->
    <!-- 开启缓存注解模式-->
    <!--<cache:annotation-driven/>-->
    <!--<context:property-placeholder location='classpath:/redis/redis.properties'/>-->
    <!-- Jedis 连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxActive}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWait}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
    </bean>
    <!-- Jedis ConnectionFactory 数据库连接配置-->
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.hostname}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!-- redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <!-- redis中key的序列化形式，目前使用string（字符串）型作为key的序列化形式-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

        <!-- redis中value的序列化形式，目前使用jdk型作为value的序列化形式，使用jdk序列化形式内容会以对象的形式存在-->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--<property name="hashKeySerializer">-->
        <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
        <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    </bean>

    <!--<bean id='cacheManager'-->
    <!--class='org.springframework.data.redis.cache.RedisCacheManager'-->
    <!--c:template-ref='redisTemplate'/>-->
    <!-- redis -->


    <!-- 发布订阅消息 -->
    <!-- 定义一个消息发布者，直接使用redisTemplate也可以-->
    <bean id="messageQueueSender" class="com.neko.queue.MessageQueueSender">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>
    <!-- 定义消息序列化形式 -->
    <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <!-- 定义一个监听器也就是订阅者-->
    <bean id="messageQueueListener" class="com.neko.queue.MessageQueueListener"/>
    <!--
    redis:listener 其中ref是订阅者使用的类，serializer序列化形式，method订阅到执行的方法，topic订阅的频道
    注意如果不配置task-executor会重复订阅
     -->
    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>
    <redis:listener-container connection-factory="redisConnectionFactory">
        <redis:listener ref="messageQueueListener" serializer="jdkSerializer" method="onMessage" topic="java"/>
    </redis:listener-container>
    <!-- 发布订阅消息 -->
    <!--<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer"-->
    <!--destroy-method="destroy">-->
    <!--<property name="connectionFactory" ref="redisConnectionFactory"/>-->
    <!--<property name="taskExecutor">&lt;!&ndash; 此处有个奇怪的问题，无法正确使用其他类型的Executor &ndash;&gt;-->
    <!--<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">-->
    <!--<property name="poolSize" value="3"></property>-->
    <!--</bean>-->
    <!--</property>-->
    <!--<property name="messageListeners">-->
    <!--<map>-->
    <!--<entry key-ref="messageQueueListener">-->
    <!--<bean class="org.springframework.data.redis.listener.ChannelTopic">-->
    <!--<constructor-arg value="java"/>-->
    <!--</bean>-->
    <!--</entry>-->
    <!--</map>-->
    <!--</property>-->
    <!--</bean>-->
</beans>